 <div className="flex flex-col gap-2">
          <label className="text-lg font-semibold">
            Select Assessment Type
          </label>
          <select
            className="p-2 border border-gray-300 rounded focus:border-gray-200 focus:outline-none"
            value={assessmentType}
            onChange={handleAssessmentTypeChange}
          >
            <option value="Review">Review</option>
            <option value="Survey">Survey</option>
          </select>
        </div>

        {assessmentType === "Review" && (
          <div className="flex flex-col gap-4">
            <h3>Review Form</h3>
            <div className="flex flex-col gap-2">
              <label>Select Subject for Review</label>
              <input type="text" placeholder="Search and select employee" />
            </div>
            <div className="flex flex-col gap-2">
              <label
                className="text-lg font-semibold"
                style={{ color: theme === "dark" ? "#f5f5f5" : "#444" }}
              >Review Cycle</label>

              <select
                className="p-2 border border-gray-300 rounded focus:border-gray-200 focus:outline-none"
              >
                <option value="HalfYear">Half Year</option>
                <option value="FullYear">Full Year</option>
                {/* Add more options as needed */}
              </select>
            </div>
            <div className="flex">

            <div className="flex flex-col gap-2">
            <label
              className="text-lg font-semibold"
              style={{ color: theme === "dark" ? "#f5f5f5" : "#444" }}
            >
              Add Responders
            </label>
              <input type="text" placeholder="Add responders' email" />
            </div>

            <div className="flex flex-col gap-2">
            <label
              className="text-lg font-semibold"
              style={{ color: theme === "dark" ? "#f5f5f5" : "#444" }}
              >
              Role
            </label>
              <select className="p-2 border border-gray-300 rounded focus:border-gray-200 focus:outline-none">
                <option value="Manager">Manager</option>
                <option value="Peer">Peer</option>
                <option value="Self">Self</option>
              </select>
            </div>
            </div>

            <div className="flex flex-col gap-2">
              <button onClick={handleAddResponder}>Add</button>
            </div>

            {
                respondersList.length > 0 && (
                    <div className="flex flex-col gap-2 border-dotted">
                        <h3>Responders</h3>
                        <ul>
                            {respondersList.map((responder, index) => (
                                <li key={index}>
                                    <span>{responder.email}</span>
                                    <span>{responder.role}</span>
                                    <button onClick={() => handleRemoveResponder(index)}>Remove</button>
                                </li>
                            ))}
                        </ul>
                    </div>
                )
            }


            <button>Send</button>
          </div>
        )}

        {assessmentType === "Survey" && (
          <div>
            {/* Survey Form */}
            <h3>Survey Form</h3>
            <label>
              Select Survey:
              <select>
                <option value="Survey1">Survey 1</option>
                <option value="Survey2">Survey 2</option>
                {/* Add more options as needed */}
              </select>
            </label>
            <label>
              Select Group:
              <select>
                <option value="Group1">Group 1</option>
                <option value="Group2">Group 2</option>
                {/* Add more options as needed */}
              </select>
            </label>
            <button>Send</button>
          </div>
        )}



        <iframe src="data:text/html;base64," style="border:0;margin:0;width: 1024px;height:1024px;" />